{"version":3,"sources":["components/Navbar/Navbar.js","components/Intro/Intro.js","components/Adder/Adder.js","components/TaskList/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","React","Component","Intro","width","height","viewBox","fill","xmlns","fillRule","d","clipRule","Adder","e","typedText","document","querySelector","value","length","preventDefault","this","props","updateTasksList","name","rows","id","type","onClick","handleClick","bind","TaskList","event","liForDelete","target","closest","remove","console","log","style","textDecoration","elements","task","map","index","key","onDoubleClick","handleDouble","handleCloser","allTasks","App","state","newTask","push","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mWAoBeA,G,6KAfX,OACI,yBAAKC,UAAU,8FACX,wBAAIA,UAAU,2CACV,wBAAIA,UAAU,iBACX,uBAAGC,KAAK,UAAR,yBAEH,wBAAID,UAAU,iBACX,uBAAGC,KAAK,SAAR,yC,GATEC,IAAMC,YCkBZC,G,6KAhBf,OACI,yBAAKJ,UAAU,0FACX,yDACA,2DACA,yBAAKA,UAAU,QACX,yBAAKA,UAAU,mBAAmBK,MAAM,OAAOC,OAAO,OAAOC,QAAQ,YAAYC,KAAK,eAAeC,MAAM,8BAC3G,0BAAMC,SAAS,UAAUC,EAAE,kHAAkHC,SAAS,YACtJ,0BAAMF,SAAS,UAAUC,EAAE,yDAAyDC,SAAS,mB,GATrFV,IAAMC,YC8BXU,G,gLA1BEC,GACb,IAAIC,EAAYC,SAASC,cAAc,aAAaC,MACpD,GAAyB,IAArBH,EAAUI,OAGd,OAFAL,EAAEM,iBACFJ,SAASC,cAAc,aAAaC,MAAQ,GACrCG,KAAKC,MAAMC,gBAAgBR,GAE9BD,EAAEM,mB,+BAOV,OACI,yBAAKpB,UAAU,4CACd,uBAAGwB,KAAK,UACR,wBAAIxB,UAAU,aAAd,+BACC,0BAAMA,UAAU,8CAChB,8BAAUA,UAAU,oBAAoByB,KAAK,IAAIC,GAAG,aACpD,4BAAQC,KAAK,SAAS3B,UAAU,mDAC/B0B,GAAG,YAAYE,QAASP,KAAKQ,YAAYC,KAAKT,OAD/C,a,GAxBcnB,IAAMC,YC6BX4B,G,iLA3BEC,GACT,IAAIC,EAAcD,EAAME,OAAOC,QAAQ,MACvCF,EAAYG,SACZC,QAAQC,IAAIL,K,mCAEFD,GACyC,iBAAnDA,EAAME,OAAOC,QAAQ,KAAKI,MAAMC,eAAoCR,EAAME,OAAOC,QAAQ,KAAKI,MAAMC,eAAiB,OAASR,EAAME,OAAOC,QAAQ,KAAKI,MAAMC,eAAiB,iB,+BAG5K,IAAD,OACFC,EAAWpB,KAAKC,MAAMoB,KACtB,OACR,yBAAK1C,UAAU,cACX,uBAAGwB,KAAK,SACR,mDACA,wBAAIxB,UAAU,yCACTyC,EAASE,KAAK,SAACzB,EAAO0B,GACvB,OAAO,wBAAIC,IAAKD,EAAO5C,UAAU,kCAAkC8C,cAAe,EAAKC,cACnF,2BAAI7B,GACJ,0BAAMlB,UAAU,eAAe4B,QAAS,EAAKoB,cAA7C,e,GApBW9C,IAAMC,YCKzB8C,G,MAAW,IAiCAC,E,kDA9Bb,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IACD6B,MAAQ,CACXT,KAAK,IAEP,EAAKnB,gBAAkB,EAAKA,gBAAgBO,KAArB,gBALN,E,4DAUFsB,GACfH,EAASI,KAAKD,GACd/B,KAAKiC,SAAS,CACZZ,KAAMO,M,+BAOR,OACA,yBAAKjD,UAAU,2BACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOuB,gBAAiBF,KAAKE,kBAC7B,kBAAC,EAAD,CAAUmB,KAAMrB,KAAK8B,MAAMT,Y,GA3BfxC,IAAMC,WCEJoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9C,SAAS+C,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.3294c434.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navbar.css';\r\n\r\nclass Navbar extends React.Component {\r\nrender () {\r\n    return (\r\n        <div className=\"navigation-box navbar navbar-expand-md navbar-light bg-light d-flex justify-content-center\">\r\n            <ul className=\"navbar-nav text-center font-weight-bold\">\r\n                <li className=\"nav-item mx-3\">\r\n                   <a href=\"#adder\">Add item to the list</a>\r\n                </li>\r\n                <li className=\"nav-item mx-3\">\r\n                   <a href=\"#list\"> Look at your current 'Todos' </a>\r\n                </li>\r\n        </ul>\r\n    </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Intro.css';\r\n\r\nclass Intro extends React.Component {\r\n    render () {\r\nreturn (\r\n    <div className=\"intro-box container-fluid d-flex flex-column align-items-center justify-content-center\">\r\n        <h1>Welcome to the To Do List</h1>\r\n        <p>Created by Alex 3sp on React</p>\r\n        <div className=\"mt-5\">\r\n            <svg className=\"bi bi-arrow-down\" width=\"3rem\" height=\"3rem\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path fillRule=\"evenodd\" d=\"M4.646 9.646a.5.5 0 01.708 0L8 12.293l2.646-2.647a.5.5 0 01.708.708l-3 3a.5.5 0 01-.708 0l-3-3a.5.5 0 010-.708z\" clipRule=\"evenodd\"/>\r\n            <path fillRule=\"evenodd\" d=\"M8 2.5a.5.5 0 01.5.5v9a.5.5 0 01-1 0V3a.5.5 0 01.5-.5z\" clipRule=\"evenodd\"/>\r\n        </svg>\r\n        </div> \r\n    </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Intro;","import React from 'react';\r\nimport './Adder.css';\r\n\r\nclass Adder extends React.Component {\r\n\r\n    \r\n\r\n    handleClick (e) {\r\n    let typedText = document.querySelector('#textArea').value; \r\n    if (typedText.length !== 0) { \r\n    e.preventDefault();\r\n    document.querySelector('#textArea').value = ''\r\n    return this.props.updateTasksList(typedText);                       \r\n    } else {\r\n        e.preventDefault()\r\n    }\r\n}\r\n\r\n        \r\n render() {\r\n    \r\nreturn (\r\n    <div className=\"jumbotron bg-info text-center text-white\">\r\n     <a name=\"adder\"></a>\r\n     <h2 className=\"display-3\">Here you can add your tasks</h2>\r\n      <form className=\"mt-5 d-flex flex-column align-items-center\">\r\n      <textarea className=\"form-control w-50\" rows='5' id='textArea'></textarea>\r\n      <button type=\"submit\" className=\"btn btn-outline-light font-weight-bold w-25 mt-3\" \r\n       id='addButton' onClick={this.handleClick.bind(this)}>Add</button>\r\n      </form>\r\n   </div>)}\r\n}\r\n\r\nexport default Adder;","import React from 'react'\r\nimport './TaskList.css';\r\n\r\n\r\nclass TaskList extends React.Component {\r\n    handleCloser(event) {\r\n        let liForDelete = event.target.closest('li');\r\n        liForDelete.remove();\r\n        console.log(liForDelete);\r\n    }\r\n    handleDouble (event) {\r\n        event.target.closest('p').style.textDecoration === 'line-through' ? event.target.closest('p').style.textDecoration = 'none' : event.target.closest('p').style.textDecoration = 'line-through';\r\n    }\r\n    \r\nrender () {\r\n    let elements = this.props.task;    \r\n        return (\r\n<div className=\"list-items\">\r\n    <a name=\"list\"></a>\r\n    <h2>Your current tasks:</h2>\r\n    <ul className=\"d-flex flex-column align-items-center\">\r\n        {elements.map( (value, index) => {\r\n        return <li key={index} className=\"py-3 px-3 mb-2 font-weight-bold\" onDoubleClick={this.handleDouble}> \r\n            <p>{value}</p>\r\n            <span className=\"close-button\" onClick={this.handleCloser}>X</span>\r\n        </li> \r\n            } )}\r\n    </ul>\r\n</div>)\r\n    }\r\n}\r\n\r\nexport default TaskList","import React from 'react';\n\nimport Navbar from './components/Navbar/Navbar';\nimport Intro from './components/Intro/Intro';\nimport Adder from './components/Adder/Adder'\nimport TaskList from './components/TaskList/TaskList';\n\nimport './App.css';\n\nlet allTasks = [];\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      task:[]\n     }\n    this.updateTasksList = this.updateTasksList.bind(this)\n  }\n\n\n\n  updateTasksList (newTask) {\n    allTasks.push(newTask)\n    this.setState({\n      task: allTasks\n    });\n    \n  }\n  \n  render () {   \n    \n    return (\n    <div className=\"container-fluid wrapper\">\n      <Navbar />\n      <Intro />\n      <Adder updateTasksList={this.updateTasksList}/>\n      <TaskList task={this.state.task}/>\n    </div>\n  )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}